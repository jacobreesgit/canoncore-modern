name: Performance Testing

on:
  # Run on push to main and pull requests
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      test_priority:
        description: 'Test Priority Level'
        required: false
        default: 'high'
        type: choice
        options:
          - high
          - medium
          - low
          - all

jobs:
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: canoncore_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/canoncore_test
      NEXTAUTH_SECRET: performance-test-secret
      AUTH_URL: http://localhost:3000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        run: |
          pnpm db:push
          pnpm db:generate

      - name: Type check
        run: pnpm type-check

      - name: Build application
        run: pnpm build

      - name: Run performance benchmarks
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
        run: pnpm bench
        env:
          NODE_OPTIONS: '--expose-gc --max-old-space-size=4096'

      - name: Run custom benchmarks
        if: github.event_name == 'workflow_dispatch'
        run: |
          case "${{ github.event.inputs.test_priority }}" in
            high)
              pnpm bench:db
              ;;
            medium)
              pnpm bench:db && pnpm bench:api
              ;;
            low)
              pnpm bench:memory
              ;;
            all|*)
              pnpm bench
              ;;
          esac
        env:
          NODE_OPTIONS: '--expose-gc --max-old-space-size=4096'

      - name: Comment PR with benchmark results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## ðŸ“Š Performance Benchmarks Completed

            âœ… **Database benchmarks**: CRUD operations, complex queries, service layer performance
            âœ… **API benchmarks**: Service performance under load, concurrent operations  
            âœ… **Memory benchmarks**: Usage patterns, leak detection, GC effectiveness

            Benchmarks completed successfully. Check the Actions logs for detailed results.

            ---
            *Performance benchmarks run automatically on all PRs. See Vitest benchmark results in the Actions output.*`;

            // Post or update comment on PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Performance Benchmarks Completed')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body,
              });
            }

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: canoncore_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/canoncore_test
      NEXTAUTH_SECRET: lighthouse-test-secret
      AUTH_URL: http://localhost:3000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        run: |
          pnpm db:push
          pnpm db:generate

      - name: Build application
        run: pnpm build

      - name: Start application
        run: |
          pnpm start &
          sleep 10
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000

      - name: Run Lighthouse audit
        run: pnpm perf:lighthouse:ci

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: |
            .lighthouseci/
            lighthouse-results.json
          retention-days: 30
