name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.15.0'
  PNPM_CACHE_FOLDER: .pnpm
  NPM_CONFIG_REGISTRY: https://registry.npmjs.org/
  NPM_CONFIG_FETCH_TIMEOUT: 120000

jobs:
  lint-and-test:
    name: Lint, Type Check & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure npm registry with retries
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "fetch-timeout=120000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          echo "fetch-retry-mintimeout=10000" >> .npmrc
          echo "fetch-retries=5" >> .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            ~/.cache/pnpm
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do
            if pnpm install --frozen-lockfile; then
              break
            else
              echo "Attempt $i failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type check
        run: pnpm type-check

      - name: Check code formatting
        run: pnpm format:check

      - name: Run tests
        run: pnpm test:run
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          NEXTAUTH_URL: 'http://localhost:3000'

      - name: Generate test coverage
        run: pnpm test:coverage
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          NEXTAUTH_URL: 'http://localhost:3000'

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure npm registry with retries
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "fetch-timeout=120000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          echo "fetch-retry-mintimeout=10000" >> .npmrc
          echo "fetch-retries=5" >> .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
            ~/.cache/pnpm
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do
            if pnpm install --frozen-lockfile; then
              break
            else
              echo "Attempt $i failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            public/
          retention-days: 1

  deploy-preview:
    name: Deploy Preview (PR)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure npm registry with retries
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "fetch-timeout=120000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          echo "fetch-retry-mintimeout=10000" >> .npmrc
          echo "fetch-retries=5" >> .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do
            if pnpm install --frozen-lockfile; then
              break
            else
              echo "Attempt $i failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview_url=$url" >> $GITHUB_OUTPUT

      - name: Comment PR with Preview URL
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Preview deployment ready!\n\n📖 Preview: ${{ steps.deploy.outputs.preview_url }}'
            })

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure npm registry with retries
        run: |
          echo "registry=https://registry.npmjs.org/" > .npmrc
          echo "fetch-timeout=120000" >> .npmrc
          echo "fetch-retry-maxtimeout=120000" >> .npmrc
          echo "fetch-retry-mintimeout=10000" >> .npmrc
          echo "fetch-retries=5" >> .npmrc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies with retry
        run: |
          for i in {1..3}; do
            if pnpm install --frozen-lockfile; then
              break
            else
              echo "Attempt $i failed. Retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production_url=$url" >> $GITHUB_OUTPUT

      - name: Output deployment URL
        run: |
          echo "🚀 Production deployment successful!"
          echo "🌐 URL: ${{ steps.deploy.outputs.production_url }}"
